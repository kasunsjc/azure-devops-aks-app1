# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ACR-ManaualConnection'
  imageRepository: 'app1/app1nginx'
  containerRegistry: 'cloudlifeacr.azurecr.io'
  dockerfilePath: '*/Dockerfile'
  tag: '$(Build.BuildId)'

  azureSubscriptionEndpoint: Microsoft Azure Sponsorship-Azure
  azureContainerRegistry: cloudlifeacr.azurecr.io
  azureResourceGroup: aksdemo
  kubernetesCluster: aksdemocluster
  useClusterAdmin: false
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: CopyFiles@2
      displayName: Copy files to target folder
      inputs:
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: publish artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy_Dev
  displayName: Deploy to AKS Development
  dependsOn: Build
  variables:
    env: dev
    namespace: development
  jobs:
    - job: Deploy
      displayName: Deploy to aks
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in deployment'
          inputs:
            targetFiles: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'
            escapeType: none
            tokenPrefix: '_'
            tokenSuffix: '_'   
        - task: Kubernetes@1
          displayName: kubectl apply for secretType dockerRegistry
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            secretType: dockerRegistry
            containerRegistryType: Azure Container Registry
            azureSubscriptionEndpointForSecrets: $(azureSubscriptionEndpoint)
            azureContainerRegistry: $(azureContainerRegistry)
            secretName: acrimagepull
            namespace: $(namespace)
            forceUpdate: true        
        - task: Kubernetes@1
          displayName: kubectl apply using configFile
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            command: apply
            namespace: $(namespace)
            useConfigurationFile: true
            configuration: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'

- stage: Deploy_Staging
  displayName: Deploy to AKS Staging
  dependsOn: Build
  variables:
    env: staging
    namespace: staging
  jobs:
    - job: Deploy
      displayName: Deploy to aks
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in deployment'
          inputs:
            targetFiles: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'
            escapeType: none
            tokenPrefix: '_'
            tokenSuffix: '_'   
        - task: Kubernetes@1
          displayName: kubectl apply for secretType dockerRegistry
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            secretType: dockerRegistry
            containerRegistryType: Azure Container Registry
            azureSubscriptionEndpointForSecrets: $(azureSubscriptionEndpoint)
            azureContainerRegistry: $(azureContainerRegistry)
            secretName: acrimagepull
            namespace: $(namespace)
            forceUpdate: true        
        - task: Kubernetes@1
          displayName: kubectl apply using configFile
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            command: apply
            namespace: $(namespace)
            useConfigurationFile: true
            configuration: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'


- stage: Deploy_QA
  displayName: Deploy to AKS QA
  dependsOn: Deploy_Dev
  variables:
    env: qa
    namespace: qa
  jobs:
    - job: Deploy
      displayName: Deploy to aks
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in deployment'
          inputs:
            targetFiles: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'
            escapeType: none
            tokenPrefix: '_'
            tokenSuffix: '_'   
        - task: Kubernetes@1
          displayName: kubectl apply for secretType dockerRegistry
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            secretType: dockerRegistry
            containerRegistryType: Azure Container Registry
            azureSubscriptionEndpointForSecrets: $(azureSubscriptionEndpoint)
            azureContainerRegistry: $(azureContainerRegistry)
            secretName: acrimagepull
            namespace: $(namespace)
            forceUpdate: true        
        - task: Kubernetes@1
          displayName: kubectl apply using configFile
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            command: apply
            namespace: $(namespace)
            useConfigurationFile: true
            configuration: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'

- stage: Deploy_Prod
  displayName: Deploy to AKS Production
  dependsOn: Deploy_QA
  variables:
    env: prod
    namespace: production
  jobs:
    - job: Deploy
      displayName: Deploy to aks
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in deployment'
          inputs:
            targetFiles: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'
            escapeType: none
            tokenPrefix: '_'
            tokenSuffix: '_'   
        - task: Kubernetes@1
          displayName: kubectl apply for secretType dockerRegistry
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            secretType: dockerRegistry
            containerRegistryType: Azure Container Registry
            azureSubscriptionEndpointForSecrets: $(azureSubscriptionEndpoint)
            azureContainerRegistry: $(azureContainerRegistry)
            secretName: acrimagepull
            namespace: $(namespace)
            forceUpdate: true        
        - task: Kubernetes@1
          displayName: kubectl apply using configFile
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
            azureResourceGroup: $(azureResourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            command: apply
            namespace: $(namespace)
            useConfigurationFile: true
            configuration: 'Git-Repository-files/kube-manifests/01-Deployment-and-LoadBalancer-Service.yml'
